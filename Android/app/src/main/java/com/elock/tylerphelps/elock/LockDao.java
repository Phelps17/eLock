package com.elock.tylerphelps.elock;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.elock.tylerphelps.elock.Lock;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCK".
*/
public class LockDao extends AbstractDao<Lock, Long> {

    public static final String TABLENAME = "LOCK";

    /**
     * Properties of entity Lock.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Identifier = new Property(1, String.class, "identifier", false, "IDENTIFIER");
        public final static Property Channel = new Property(2, String.class, "channel", false, "CHANNEL");
        public final static Property PublishKey = new Property(3, String.class, "publishKey", false, "PUBLISH_KEY");
        public final static Property SubscribeKey = new Property(4, String.class, "subscribeKey", false, "SUBSCRIBE_KEY");
        public final static Property Nickname = new Property(5, String.class, "nickname", false, "NICKNAME");
    };


    public LockDao(DaoConfig config) {
        super(config);
    }
    
    public LockDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDENTIFIER\" TEXT NOT NULL ," + // 1: identifier
                "\"CHANNEL\" TEXT NOT NULL ," + // 2: channel
                "\"PUBLISH_KEY\" TEXT NOT NULL ," + // 3: publishKey
                "\"SUBSCRIBE_KEY\" TEXT NOT NULL ," + // 4: subscribeKey
                "\"NICKNAME\" TEXT NOT NULL );"); // 5: nickname
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Lock entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdentifier());
        stmt.bindString(3, entity.getChannel());
        stmt.bindString(4, entity.getPublishKey());
        stmt.bindString(5, entity.getSubscribeKey());
        stmt.bindString(6, entity.getNickname());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Lock readEntity(Cursor cursor, int offset) {
        Lock entity = new Lock( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // identifier
            cursor.getString(offset + 2), // channel
            cursor.getString(offset + 3), // publishKey
            cursor.getString(offset + 4), // subscribeKey
            cursor.getString(offset + 5) // nickname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Lock entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdentifier(cursor.getString(offset + 1));
        entity.setChannel(cursor.getString(offset + 2));
        entity.setPublishKey(cursor.getString(offset + 3));
        entity.setSubscribeKey(cursor.getString(offset + 4));
        entity.setNickname(cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Lock entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Lock entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
